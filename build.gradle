//file:noinspection GroovyAssignabilityCheck
plugins {
    id 'java'
    //noinspection SpellCheckingInspection
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'org.matita08.plugins'
version = '0.4.2'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")
    compileOnly("com.velocitypowered:velocity-api:3.4.0-SNAPSHOT")
    implementation 'net.dv8tion:JDA:5.1.2'
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.FAIL
    from {
        configurations.runtimeClasspath.collect {
            print it.name
            if (it.name.contains("JDA") ||
                    it.name.contains("nv-websocket-client") ||
                    it.name.contains("okhttp") ||
                    it.name.contains("kotlin") ||
                    it.name.contains("okio") ||
                    it.name.contains("core-3.1.0")) {
                print " yes"
            } else print " nope"
            if(it.isDirectory()) print " dir"
            print "\n"
            it.isDirectory() ? it : zipTree(it)
        }
        destinationDirectory.set(layout.buildDirectory.dir("final"))
    }
}

task fatJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.WARN
    from {
        configurations.runtimeClasspath.collect {
            if (it.name.contains("JDA") ||
                    it.name.contains("nv-websocket-client") ||
                    it.name.contains("okhttp") ||
                    it.name.contains("kotlin") ||
                    it.name.contains("okio") ||
                    it.name.contains("core-3.1.0"))
                it.isDirectory() ? it : zipTree(it)
            else null
        }
    }
    exclude("META-INF/versions/")
    with jar
    destinationDirectory.set(layout.buildDirectory.dir("fatJar"))
}
